{
  "auth": {
    "description": "Authenticate gh and git with GitHub",
    "subcommands": {
      "login": {
        "usage": "gh auth login [flags]",
        "inputs": [],
        "description": "Authenticate with a GitHub host.",
        "flags": [
          {
            "names": ["-p", "--git-protocol"],
            "description": "The protocol to use for git operations: {ssh|https}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-h", "--hostname"],
            "description": "The hostname of the GitHub instance to authenticate with",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-s", "--scopes"],
            "description": "Additional authentication scopes to request",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--secure-storage"],
            "description": "Save authentication credentials in secure credential store",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open a browser to authenticate",
            "input": null
          },
          {
            "names": ["--with-token"],
            "description": "Read token from standard input",
            "input": null
          }
        ]
      },
      "logout": {
        "usage": "gh auth logout [flags]",
        "inputs": [],
        "description": "Remove authentication for a GitHub host.",
        "flags": [
          {
            "names": ["-h", "--hostname"],
            "description": "The hostname of the GitHub instance to log out of",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "refresh": {
        "usage": "gh auth refresh [flags]",
        "inputs": [],
        "description": "Expand or fix the permission scopes for stored credentials.",
        "flags": [
          {
            "names": ["-h", "--hostname"],
            "description": "The GitHub host to use for authentication",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-s", "--scopes"],
            "description": "Additional authentication scopes for gh to have",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--secure-storage"],
            "description": "Save authentication credentials in secure credential store",
            "input": null
          }
        ]
      },
      "setup-git": {
        "usage": "gh auth setup-git [flags]",
        "inputs": [],
        "description": "Configure git to use GitHub CLI as a credential helper",
        "flags": [
          {
            "names": ["-h", "--hostname"],
            "description": "The hostname to configure git for",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "status": {
        "usage": "gh auth status [flags]",
        "inputs": [],
        "description": "Verifies and displays information about your authentication state.",
        "flags": [
          {
            "names": ["-h", "--hostname"],
            "description": "Check a specific hostname's auth status",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--show-token"],
            "description": "Display the auth token",
            "input": null
          }
        ]
      },
      "token": {
        "usage": "gh auth token [flags]",
        "inputs": [],
        "description": "Print the auth token gh is configured to use",
        "flags": [
          {
            "names": ["-h", "--hostname"],
            "description": "The hostname of the GitHub instance authenticated with",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--secure-storage"],
            "description": "Search only secure credential store for authentication token",
            "input": null
          }
        ]
      }
    }
  },
  "browse": { "description": "", "subcommands": {} },
  "codespace": {
    "description": "Connect to and manage codespaces",
    "subcommands": {
      "code": {
        "usage": "gh codespace code [flags]",
        "inputs": [],
        "description": "Open a codespace in Visual Studio Code",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--insiders"],
            "description": "Use the insiders version of Visual Studio Code",
            "input": null
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Use the web version of Visual Studio Code",
            "input": null
          }
        ]
      },
      "cp": {
        "usage": "gh codespace cp [-e] [-r] [-- [<scp flags>...]] <sources>... <dest>",
        "inputs": [
          { "name": "<scp flags>...]] <sources>... <dest>", "type": "shell" }
        ],
        "description": "The cp command copies files between the local and remote file systems.",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-e", "--expand"],
            "description": "Expand remote file names on remote shell",
            "input": null
          },
          {
            "names": ["-p", "--profile"],
            "description": "Name of the SSH profile to use",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-r", "--recursive"],
            "description": "Recursively copy directories",
            "input": null
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "create": {
        "usage": "gh codespace create [flags]",
        "inputs": [],
        "description": "Create a codespace",
        "flags": [
          {
            "names": ["-b", "--branch"],
            "description": "repository branch",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--default-permissions"],
            "description": "do not prompt to accept additional permissions requested by the codespace",
            "input": null
          },
          {
            "names": ["--devcontainer-path"],
            "description": "path to the devcontainer.json file to use when creating codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--display-name"],
            "description": "display name for the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--idle-timeout"],
            "description": "allowed inactivity before codespace is stopped, e.g. \"10m\", \"1h\"",
            "input": { "name": "<duration>", "type": "shell" }
          },
          {
            "names": ["-l", "--location"],
            "description": "location: {EastUs|SouthEastAsia|WestEurope|WestUs2} (determined automatically if not provided)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-m", "--machine"],
            "description": "hardware specifications for the VM",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "repository name with owner: user/repo",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--retention-period"],
            "description": "allowed time after shutting down before the codespace is automatically deleted (maximum 30 days), e.g. \"1h\", \"72h\"",
            "input": { "name": "<duration>", "type": "shell" }
          },
          {
            "names": ["-s", "--status"],
            "description": "show status of post-create command and dotfiles",
            "input": null
          }
        ]
      },
      "delete": {
        "usage": "gh codespace delete [flags]",
        "inputs": [],
        "description": "Delete codespaces based on selection criteria.",
        "flags": [
          {
            "names": ["--all"],
            "description": "Delete all codespaces",
            "input": null
          },
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--days"],
            "description": "Delete codespaces older than N days",
            "input": { "name": "<N>", "type": "shell" }
          },
          {
            "names": ["-f", "--force"],
            "description": "Skip confirmation for codespaces that contain unsaved changes",
            "input": null
          },
          {
            "names": ["-o", "--org"],
            "description": "The login handle of the organization (admin-only)",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-u", "--user"],
            "description": "The username to delete codespaces for (used with --org)",
            "input": { "name": "<username>", "type": "shell" }
          }
        ]
      },
      "edit": {
        "usage": "gh codespace edit [flags]",
        "inputs": [],
        "description": "Edit a codespace",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--display-name"],
            "description": "Set the display name",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-m", "--machine"],
            "description": "Set hardware specifications for the VM",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "jupyter": {
        "usage": "gh codespace jupyter [flags]",
        "inputs": [],
        "description": "Open a codespace in JupyterLab",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "list": {
        "usage": "gh codespace list [flags]",
        "inputs": [],
        "description": "List codespaces of the authenticated user.",
        "flags": [
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of codespaces to list",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["-o", "--org"],
            "description": "The login handle of the organization to list codespaces for (admin-only)",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Repository name with owner: user/repo",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-u", "--user"],
            "description": "The username to list codespaces for (used with --org)",
            "input": { "name": "<username>", "type": "shell" }
          }
        ]
      },
      "logs": {
        "usage": "gh codespace logs [flags]",
        "inputs": [],
        "description": "Access codespace logs",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-f", "--follow"],
            "description": "Tail and follow the logs",
            "input": null
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "ports": {
        "usage": "gh codespace ports [flags]",
        "inputs": [],
        "description": "List ports in a codespace",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "rebuild": {
        "usage": "gh codespace rebuild [flags]",
        "inputs": [],
        "description": "Rebuilding recreates your codespace. Your code and any current changes will be\npreserved. Your codespace will be rebuilt using your working directory's\ndev container. A full rebuild also removes cached Docker images.",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--full"],
            "description": "perform a full rebuild",
            "input": null
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "ssh": {
        "usage": "gh codespace ssh [<flags>...] [-- <ssh-flags>...] [<command>]",
        "inputs": [
          { "name": "<flags>...] [-- <ssh-flags>", "type": "shell" },
          {
            "name": "<flags>...] [-- <ssh-flags>...] [<command>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "The 'ssh' command is used to SSH into a codespace. In its simplest form, you can\nrun 'gh cs ssh', select a codespace interactively, and connect.",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--config"],
            "description": "Write OpenSSH configuration to stdout",
            "input": null
          },
          {
            "names": ["-d", "--debug"],
            "description": "Log debug data to a file",
            "input": null
          },
          {
            "names": ["--debug-file"],
            "description": "Path of the file log to",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--profile"],
            "description": "Name of the SSH profile to use",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--server-port"],
            "description": "SSH server port number (0 => pick unused)",
            "input": { "name": "<int>", "type": "shell" }
          }
        ]
      },
      "stop": {
        "usage": "gh codespace stop [flags]",
        "inputs": [],
        "description": "Stop a running codespace",
        "flags": [
          {
            "names": ["-c", "--codespace"],
            "description": "Name of the codespace",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-o", "--org"],
            "description": "The login handle of the organization (admin-only)",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-R", "--repo"],
            "description": "Filter codespace selection by repository name (user/repo)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-u", "--user"],
            "description": "The username to stop codespace for (used with --org)",
            "input": { "name": "<username>", "type": "shell" }
          }
        ]
      }
    }
  },
  "gist": {
    "description": "Work with GitHub gists.",
    "subcommands": {
      "clone": {
        "usage": "gh gist clone <gist> [<directory>] [-- <gitflags>...]",
        "inputs": [
          { "name": "<gist> [<directory>] [-- <gitflags>", "type": "shell" },
          { "name": "<directory>", "type": "shell", "multiple": true }
        ],
        "description": "Clone a GitHub gist locally.",
        "flags": []
      },
      "create": {
        "usage": "gh gist create [<filename>... | -] [flags]",
        "inputs": [{ "name": "<filename>", "type": "shell" }],
        "description": "Create a new GitHub gist with given contents.",
        "flags": [
          {
            "names": ["-d", "--desc"],
            "description": "A description for this gist",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-f", "--filename"],
            "description": "Provide a filename to be used when reading from standard input",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-p", "--public"],
            "description": "List the gist publicly (default: secret)",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the web browser with created gist",
            "input": null
          }
        ]
      },
      "delete": {
        "usage": "gh gist delete {<id> | <url>}",
        "inputs": [
          { "name": "<id> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Delete a gist",
        "flags": []
      },
      "edit": {
        "usage": "gh gist edit {<id> | <url>} [<filename>] [flags]",
        "inputs": [
          {
            "name": "<id> | <url>} [<filename>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Edit one of your gists",
        "flags": [
          {
            "names": ["-a", "--add"],
            "description": "Add a new file to the gist",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--desc"],
            "description": "New description for the gist",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-f", "--filename"],
            "description": "Select a file to edit",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "list": {
        "usage": "gh gist list [flags]",
        "inputs": [],
        "description": "List your gists",
        "flags": [
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of gists to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--public"],
            "description": "Show only public gists",
            "input": null
          },
          {
            "names": ["--secret"],
            "description": "Show only secret gists",
            "input": null
          }
        ]
      },
      "view": {
        "usage": "gh gist view [<id> | <url>] [flags]",
        "inputs": [
          { "name": "<id> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "View the given gist or select from recent gists.",
        "flags": [
          {
            "names": ["-f", "--filename"],
            "description": "Display a single file from the gist",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--files"],
            "description": "List file names from the gist",
            "input": null
          },
          {
            "names": ["-r", "--raw"],
            "description": "Print raw instead of rendered gist contents",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open gist in the browser",
            "input": null
          }
        ]
      }
    }
  },
  "issue": {
    "description": "Work with GitHub issues.",
    "subcommands": {
      "create": {
        "usage": "gh issue create [flags]",
        "inputs": [],
        "description": "Create an issue on GitHub.",
        "flags": [
          {
            "names": ["-a", "--assignee"],
            "description": "Assign people by their login. Use \"@me\" to self-assign.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-b", "--body"],
            "description": "Supply a body. Will prompt for one otherwise.",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-l", "--label"],
            "description": "Add labels by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["-m", "--milestone"],
            "description": "Add the issue to a milestone by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["-p", "--project"],
            "description": "Add the issue to projects by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--recover"],
            "description": "Recover input from a failed run of create",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--title"],
            "description": "Supply a title. Will prompt for one otherwise.",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the browser to create an issue",
            "input": null
          }
        ]
      },
      "list": {
        "usage": "gh issue list [flags]",
        "inputs": [],
        "description": "List issues in a GitHub repository.",
        "flags": [
          {
            "names": ["--app"],
            "description": "Filter by GitHub App author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-a", "--assignee"],
            "description": "Filter by assignee",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-A", "--author"],
            "description": "Filter by author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-l", "--label"],
            "description": "Filter by label",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of issues to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--mention"],
            "description": "Filter by mention",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-m", "--milestone"],
            "description": "Filter by milestone number or title",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-S", "--search"],
            "description": "Search issues with query",
            "input": { "name": "<query>", "type": "shell" }
          },
          {
            "names": ["-s", "--state"],
            "description": "Filter by state: {open|closed|all}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "List issues in the web browser",
            "input": null
          }
        ]
      },
      "status": {
        "usage": "gh issue status [flags]",
        "inputs": [],
        "description": "Show status of relevant issues",
        "flags": [
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "close": {
        "usage": "gh issue close {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Close issue",
        "flags": [
          {
            "names": ["-c", "--comment"],
            "description": "Leave a closing comment",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-r", "--reason"],
            "description": "Reason for closing: {completed|not planned}",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "comment": {
        "usage": "gh issue comment {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Add a comment to a GitHub issue.",
        "flags": [
          {
            "names": ["-b", "--body"],
            "description": "The comment body text",
            "input": { "name": "<text>", "type": "shell" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["--edit-last"],
            "description": "Edit the last comment of the same author",
            "input": null
          },
          {
            "names": ["-e", "--editor"],
            "description": "Skip prompts and open the text editor to write the body in",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the web browser to write the comment",
            "input": null
          }
        ]
      },
      "delete": {
        "usage": "gh issue delete {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Delete issue",
        "flags": [
          {
            "names": ["--yes"],
            "description": "confirm deletion without prompting",
            "input": null
          }
        ]
      },
      "develop": {
        "usage": "gh issue develop [flags] {<number> | <url>}",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Manage linked branches for an issue",
        "flags": [
          {
            "names": ["-b", "--base"],
            "description": "Name of the base branch you want to make your new branch from",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-c", "--checkout"],
            "description": "Checkout the branch after creating it",
            "input": null
          },
          {
            "names": ["-i", "--issue-repo"],
            "description": "Name or URL of the issue's repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-l", "--list"],
            "description": "List linked branches for the issue",
            "input": null
          },
          {
            "names": ["-n", "--name"],
            "description": "Name of the branch to create",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "edit": {
        "usage": "gh issue edit {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Edit an issue.",
        "flags": [
          {
            "names": ["--add-assignee"],
            "description": "Add assigned users by their login. Use \"@me\" to assign yourself.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["--add-label"],
            "description": "Add labels by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--add-project"],
            "description": "Add the issue to projects by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["-b", "--body"],
            "description": "Set the new body.",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-m", "--milestone"],
            "description": "Edit the milestone the issue belongs to by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--remove-assignee"],
            "description": "Remove assigned users by their login. Use \"@me\" to unassign yourself.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["--remove-label"],
            "description": "Remove labels by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--remove-project"],
            "description": "Remove the issue from projects by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["-t", "--title"],
            "description": "Set the new title.",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "lock": {
        "usage": "gh issue lock {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Lock issue conversation",
        "flags": [
          {
            "names": ["-r", "--reason"],
            "description": "Optional reason for locking conversation (off_topic, resolved, spam, too_heated).",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "pin": {
        "usage": "gh issue pin {<number> | <url>}",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Pin an issue to a repository.",
        "flags": []
      },
      "reopen": {
        "usage": "gh issue reopen {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Reopen issue",
        "flags": [
          {
            "names": ["-c", "--comment"],
            "description": "Add a reopening comment",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "transfer": {
        "usage": "gh issue transfer {<number> | <url>} <destination-repo>",
        "inputs": [
          { "name": "<number> | <url>} <destination-repo>", "type": "shell" },
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Transfer issue to another repository",
        "flags": []
      },
      "unlock": {
        "usage": "gh issue unlock {<number> | <url>}",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Unlock issue conversation",
        "flags": []
      },
      "unpin": {
        "usage": "gh issue unpin {<number> | <url>}",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Unpin an issue from a repository.",
        "flags": []
      },
      "view": {
        "usage": "gh issue view {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Display the title, body, and other information about an issue.",
        "flags": [
          {
            "names": ["-c", "--comments"],
            "description": "View issue comments",
            "input": null
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open an issue in the browser",
            "input": null
          }
        ]
      }
    }
  },
  "pr": {
    "description": "Work with GitHub pull requests.",
    "subcommands": {
      "create": {
        "usage": "gh pr create [flags]",
        "inputs": [],
        "description": "Create a pull request on GitHub.",
        "flags": [
          {
            "names": ["-a", "--assignee"],
            "description": "Assign people by their login. Use \"@me\" to self-assign.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-B", "--base"],
            "description": "The branch into which you want your code merged",
            "input": { "name": "<branch>", "type": "shell" }
          },
          {
            "names": ["-b", "--body"],
            "description": "Body for the pull request",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-d", "--draft"],
            "description": "Mark pull request as a draft",
            "input": null
          },
          {
            "names": ["-f", "--fill"],
            "description": "Do not prompt for title/body and just use commit info",
            "input": null
          },
          {
            "names": ["-H", "--head"],
            "description": "The branch that contains commits for your pull request (default: current branch)",
            "input": { "name": "<branch>", "type": "shell" }
          },
          {
            "names": ["-l", "--label"],
            "description": "Add labels by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["-m", "--milestone"],
            "description": "Add the pull request to a milestone by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--no-maintainer-edit"],
            "description": "Disable maintainer's ability to modify pull request",
            "input": null
          },
          {
            "names": ["-p", "--project"],
            "description": "Add the pull request to projects by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--recover"],
            "description": "Recover input from a failed run of create",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-r", "--reviewer"],
            "description": "Request reviews from people or teams by their handle",
            "input": { "name": "<handle>", "type": "shell" }
          },
          {
            "names": ["-t", "--title"],
            "description": "Title for the pull request",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the web browser to create a pull request",
            "input": null
          }
        ]
      },
      "list": {
        "usage": "gh pr list [flags]",
        "inputs": [],
        "description": "List pull requests in a GitHub repository.",
        "flags": [
          {
            "names": ["--app"],
            "description": "Filter by GitHub App author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-a", "--assignee"],
            "description": "Filter by assignee",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-A", "--author"],
            "description": "Filter by author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-B", "--base"],
            "description": "Filter by base branch",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--draft"],
            "description": "Filter by draft state",
            "input": null
          },
          {
            "names": ["-H", "--head"],
            "description": "Filter by head branch",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-l", "--label"],
            "description": "Filter by label",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of items to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["-S", "--search"],
            "description": "Search pull requests with query",
            "input": { "name": "<query>", "type": "shell" }
          },
          {
            "names": ["-s", "--state"],
            "description": "Filter by state: {open|closed|merged|all}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "List pull requests in the web browser",
            "input": null
          }
        ]
      },
      "status": {
        "usage": "gh pr status [flags]",
        "inputs": [],
        "description": "Show status of relevant pull requests",
        "flags": [
          {
            "names": ["-c", "--conflict-status"],
            "description": "Display the merge conflict status of each pull request",
            "input": null
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "checkout": {
        "usage": "gh pr checkout {<number> | <url> | <branch>} [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Check out a pull request in git",
        "flags": [
          {
            "names": ["-b", "--branch"],
            "description": "Local branch name to use (default: the name of the head branch)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--detach"],
            "description": "Checkout PR with a detached HEAD",
            "input": null
          },
          {
            "names": ["-f", "--force"],
            "description": "Reset the existing local branch to the latest state of the pull request",
            "input": null
          },
          {
            "names": ["--recurse-submodules"],
            "description": "Update all submodules after checkout",
            "input": null
          }
        ]
      },
      "checks": {
        "usage": "gh pr checks [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Show CI status for a single pull request.",
        "flags": [
          {
            "names": ["-i", "--interval", "--watch"],
            "description": "Refresh interval in seconds when using --watch flag",
            "input": { "name": "<--watch>", "type": "shell" }
          },
          {
            "names": ["--required"],
            "description": "Only show checks that are required",
            "input": null
          },
          {
            "names": ["--watch"],
            "description": "Watch checks until they finish",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the web browser to show details about checks",
            "input": null
          }
        ]
      },
      "close": {
        "usage": "gh pr close {<number> | <url> | <branch>} [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Close a pull request",
        "flags": [
          {
            "names": ["-c", "--comment"],
            "description": "Leave a closing comment",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--delete-branch"],
            "description": "Delete the local and remote branch after close",
            "input": null
          }
        ]
      },
      "comment": {
        "usage": "gh pr comment [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Add a comment to a GitHub pull request.",
        "flags": [
          {
            "names": ["-b", "--body"],
            "description": "The comment body text",
            "input": { "name": "<text>", "type": "shell" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["--edit-last"],
            "description": "Edit the last comment of the same author",
            "input": null
          },
          {
            "names": ["-e", "--editor"],
            "description": "Skip prompts and open the text editor to write the body in",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the web browser to write the comment",
            "input": null
          }
        ]
      },
      "diff": {
        "usage": "gh pr diff [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "View changes in a pull request.",
        "flags": [
          {
            "names": ["--color"],
            "description": "Use color in diff output: {always|never|auto}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--name-only"],
            "description": "Display only names of changed files",
            "input": null
          },
          {
            "names": ["--patch"],
            "description": "Display diff in patch format",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the pull request diff in the browser",
            "input": null
          }
        ]
      },
      "edit": {
        "usage": "gh pr edit [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Edit a pull request.",
        "flags": [
          {
            "names": ["--add-assignee"],
            "description": "Add assigned users by their login. Use \"@me\" to assign yourself.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["--add-label"],
            "description": "Add labels by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--add-project"],
            "description": "Add the pull request to projects by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--add-reviewer"],
            "description": "Add reviewers by their login.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-B", "--base"],
            "description": "Change the base branch for this pull request",
            "input": { "name": "<branch>", "type": "shell" }
          },
          {
            "names": ["-b", "--body"],
            "description": "Set the new body.",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-m", "--milestone"],
            "description": "Edit the milestone the pull request belongs to by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--remove-assignee"],
            "description": "Remove assigned users by their login. Use \"@me\" to unassign yourself.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["--remove-label"],
            "description": "Remove labels by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--remove-project"],
            "description": "Remove the pull request from projects by name",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--remove-reviewer"],
            "description": "Remove reviewers by their login.",
            "input": { "name": "<login>", "type": "shell" }
          },
          {
            "names": ["-t", "--title"],
            "description": "Set the new title.",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "lock": {
        "usage": "gh pr lock {<number> | <url>} [flags]",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Lock pull request conversation",
        "flags": [
          {
            "names": ["-r", "--reason"],
            "description": "Optional reason for locking conversation (off_topic, resolved, spam, too_heated).",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "merge": {
        "usage": "gh pr merge [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Merge a pull request on GitHub.",
        "flags": [
          {
            "names": ["--admin"],
            "description": "Use administrator privileges to merge a pull request that does not meet requirements",
            "input": null
          },
          {
            "names": ["-A", "--author-email"],
            "description": "Email text for merge commit author",
            "input": { "name": "<text>", "type": "shell" }
          },
          {
            "names": ["--auto"],
            "description": "Automatically merge only after necessary requirements are met",
            "input": null
          },
          {
            "names": ["-b", "--body"],
            "description": "Body text for the merge commit",
            "input": { "name": "<text>", "type": "shell" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-d", "--delete-branch"],
            "description": "Delete the local and remote branch after merge",
            "input": null
          },
          {
            "names": ["--disable-auto"],
            "description": "Disable auto-merge for this pull request",
            "input": null
          },
          {
            "names": ["--match-head-commit"],
            "description": "Commit SHA that the pull request head must match to allow merge",
            "input": { "name": "<SHA>", "type": "shell" }
          },
          {
            "names": ["-m", "--merge"],
            "description": "Merge the commits with the base branch",
            "input": null
          },
          {
            "names": ["-r", "--rebase"],
            "description": "Rebase the commits onto the base branch",
            "input": null
          },
          {
            "names": ["-s", "--squash"],
            "description": "Squash the commits into one commit and merge it into the base branch",
            "input": null
          },
          {
            "names": ["-t", "--subject"],
            "description": "Subject text for the merge commit",
            "input": { "name": "<text>", "type": "shell" }
          }
        ]
      },
      "ready": {
        "usage": "gh pr ready [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Mark a pull request as ready for review.",
        "flags": [
          {
            "names": ["--undo"],
            "description": "Convert a pull request to \"draft\"",
            "input": null
          }
        ]
      },
      "reopen": {
        "usage": "gh pr reopen {<number> | <url> | <branch>} [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Reopen a pull request",
        "flags": [
          {
            "names": ["-c", "--comment"],
            "description": "Add a reopening comment",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "review": {
        "usage": "gh pr review [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Add a review to a pull request.",
        "flags": [
          {
            "names": ["-a", "--approve"],
            "description": "Approve pull request",
            "input": null
          },
          {
            "names": ["-b", "--body"],
            "description": "Specify the body of a review",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--body-file"],
            "description": "Read body text from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-c", "--comment"],
            "description": "Comment on a pull request",
            "input": null
          },
          {
            "names": ["-r", "--request-changes"],
            "description": "Request changes on a pull request",
            "input": null
          }
        ]
      },
      "unlock": {
        "usage": "gh pr unlock {<number> | <url>}",
        "inputs": [
          { "name": "<number> | <url>", "type": "shell", "multiple": true }
        ],
        "description": "Unlock pull request conversation",
        "flags": []
      },
      "view": {
        "usage": "gh pr view [<number> | <url> | <branch>] [flags]",
        "inputs": [
          {
            "name": "<number> | <url> | <branch>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Display the title, body, and other information about a pull request.",
        "flags": [
          {
            "names": ["-c", "--comments"],
            "description": "View pull request comments",
            "input": null
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open a pull request in the browser",
            "input": null
          }
        ]
      }
    }
  },
  "release": {
    "description": "Manage releases",
    "subcommands": {
      "create": {
        "usage": "gh release create [<tag>] [<files>...]",
        "inputs": [
          { "name": "<tag>] [<files>", "type": "shell" },
          { "name": "<tag>", "type": "shell", "multiple": true }
        ],
        "description": "Create a new GitHub Release for a repository.",
        "flags": [
          {
            "names": ["--discussion-category"],
            "description": "Start a discussion in the specified category",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--draft"],
            "description": "Save the release as a draft instead of publishing it",
            "input": null
          },
          {
            "names": ["--generate-notes"],
            "description": "Automatically generate title and notes for the release",
            "input": null
          },
          {
            "names": ["--latest"],
            "description": "Mark this release as \"Latest\" (default: automatic based on date and version)",
            "input": null
          },
          {
            "names": ["-n", "--notes"],
            "description": "Release notes",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--notes-file"],
            "description": "Read release notes from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["--notes-start-tag"],
            "description": "Tag to use as the starting point for generating release notes",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-p", "--prerelease"],
            "description": "Mark the release as a prerelease",
            "input": null
          },
          {
            "names": ["--target"],
            "description": "Target branch or full commit SHA (default: main branch)",
            "input": { "name": "<branch>", "type": "shell" }
          },
          {
            "names": ["-t", "--title"],
            "description": "Release title",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--verify-tag"],
            "description": "Abort in case the git tag doesn't already exist in the remote repository",
            "input": null
          }
        ]
      },
      "list": {
        "usage": "gh release list [flags]",
        "inputs": [],
        "description": "List releases in a repository",
        "flags": [
          {
            "names": ["--exclude-drafts"],
            "description": "Exclude draft releases",
            "input": null
          },
          {
            "names": ["--exclude-pre-releases"],
            "description": "Exclude pre-releases",
            "input": null
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of items to fetch",
            "input": { "name": "<int>", "type": "shell" }
          }
        ]
      },
      "delete": {
        "usage": "gh release delete <tag> [flags]",
        "inputs": [{ "name": "<tag>", "type": "shell" }],
        "description": "Delete a release",
        "flags": [
          {
            "names": ["--cleanup-tag"],
            "description": "Delete the specified tag in addition to its release",
            "input": null
          },
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "delete-asset": {
        "usage": "gh release delete-asset <tag> <asset-name> [flags]",
        "inputs": [{ "name": "<tag> <asset-name>", "type": "shell" }],
        "description": "Delete an asset from a release",
        "flags": [
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "download": {
        "usage": "gh release download [<tag>] [flags]",
        "inputs": [{ "name": "<tag>", "type": "shell", "multiple": true }],
        "description": "Download assets from a GitHub release.",
        "flags": [
          {
            "names": ["-A", "--archive"],
            "description": "Download the source code archive in the specified format (zip or tar.gz)",
            "input": { "name": "<format>", "type": "shell" }
          },
          {
            "names": ["--clobber"],
            "description": "Overwrite existing files of the same name",
            "input": null
          },
          {
            "names": ["-D", "--dir"],
            "description": "The directory to download files into",
            "input": { "name": "<directory>", "type": "shell" }
          },
          {
            "names": ["-O", "--output"],
            "description": "The file to write a single asset to (use \"-\" to write to standard output)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["-p", "--pattern"],
            "description": "Download only assets that match a glob pattern",
            "input": { "name": "<stringArray>", "type": "string" }
          },
          {
            "names": ["--skip-existing"],
            "description": "Skip downloading when files of the same name exist",
            "input": null
          }
        ]
      },
      "edit": {
        "usage": "gh release edit <tag>",
        "inputs": [{ "name": "<tag>", "type": "shell" }],
        "description": "Edit a release",
        "flags": [
          {
            "names": ["--discussion-category"],
            "description": "Start a discussion in the specified category when publishing a draft",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--draft"],
            "description": "Save the release as a draft instead of publishing it",
            "input": null
          },
          {
            "names": ["--latest"],
            "description": "Explicitly mark the release as \"Latest\"",
            "input": null
          },
          {
            "names": ["-n", "--notes"],
            "description": "Release notes",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-F", "--notes-file"],
            "description": "Read release notes from file (use \"-\" to read from standard input)",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["--prerelease"],
            "description": "Mark the release as a prerelease",
            "input": null
          },
          {
            "names": ["--tag"],
            "description": "The name of the tag",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--target"],
            "description": "Target branch or full commit SHA (default: main branch)",
            "input": { "name": "<branch>", "type": "shell" }
          },
          {
            "names": ["-t", "--title"],
            "description": "Release title",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "upload": {
        "usage": "gh release upload <tag> <files>... [flags]",
        "inputs": [{ "name": "<tag> <files>", "type": "shell" }],
        "description": "Upload asset files to a GitHub Release.",
        "flags": [
          {
            "names": ["--clobber"],
            "description": "Overwrite existing assets of the same name",
            "input": null
          }
        ]
      },
      "view": {
        "usage": "gh release view [<tag>] [flags]",
        "inputs": [{ "name": "<tag>", "type": "shell", "multiple": true }],
        "description": "View information about a GitHub Release.",
        "flags": [
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the release in the browser",
            "input": null
          }
        ]
      }
    }
  },
  "repo": {
    "description": "Work with GitHub repositories.",
    "subcommands": {
      "create": {
        "usage": "gh repo create [<name>] [flags]",
        "inputs": [{ "name": "<name>", "type": "shell", "multiple": true }],
        "description": "Create a new GitHub repository.",
        "flags": [
          {
            "names": ["--add-readme"],
            "description": "Add a README file to the new repository",
            "input": null
          },
          {
            "names": ["-c", "--clone"],
            "description": "Clone the new repository to the current directory",
            "input": null
          },
          {
            "names": ["-d", "--description"],
            "description": "Description of the repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--disable-issues"],
            "description": "Disable issues in the new repository",
            "input": null
          },
          {
            "names": ["--disable-wiki"],
            "description": "Disable wiki in the new repository",
            "input": null
          },
          {
            "names": ["-g", "--gitignore"],
            "description": "Specify a gitignore template for the repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-h", "--homepage"],
            "description": "Repository home page URL",
            "input": { "name": "<URL>", "type": "shell" }
          },
          {
            "names": ["--include-all-branches"],
            "description": "Include all branches from template repository",
            "input": null
          },
          {
            "names": ["--internal"],
            "description": "Make the new repository internal",
            "input": null
          },
          {
            "names": ["-l", "--license"],
            "description": "Specify an Open Source License for the repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--private"],
            "description": "Make the new repository private",
            "input": null
          },
          {
            "names": ["--public"],
            "description": "Make the new repository public",
            "input": null
          },
          {
            "names": ["--push"],
            "description": "Push local commits to the new repository",
            "input": null
          },
          {
            "names": ["-r", "--remote"],
            "description": "Specify remote name for the new repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-s", "--source"],
            "description": "Specify path to local repository to use as source",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--team"],
            "description": "The name of the organization team to be granted access",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["-p", "--template"],
            "description": "Make the new repository based on a template repository",
            "input": { "name": "<repository>", "type": "shell" }
          }
        ]
      },
      "list": {
        "usage": "gh repo list [<owner>] [flags]",
        "inputs": [{ "name": "<owner>", "type": "shell", "multiple": true }],
        "description": "List repositories owned by user or organization",
        "flags": [
          {
            "names": ["--archived"],
            "description": "Show only archived repositories",
            "input": null
          },
          {
            "names": ["--fork"],
            "description": "Show only forks",
            "input": null
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-l", "--language"],
            "description": "Filter by primary coding language",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of repositories to list",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--no-archived"],
            "description": "Omit archived repositories",
            "input": null
          },
          {
            "names": ["--source"],
            "description": "Show only non-forks",
            "input": null
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--topic"],
            "description": "Filter by topic",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--visibility"],
            "description": "Filter by repository visibility: {public|private|internal}",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "archive": {
        "usage": "gh repo archive [<repository>] [flags]",
        "inputs": [
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "Archive a GitHub repository.",
        "flags": [
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "clone": {
        "usage": "gh repo clone <repository> [<directory>] [-- <gitflags>...]",
        "inputs": [
          {
            "name": "<repository> [<directory>] [-- <gitflags>",
            "type": "shell"
          },
          { "name": "<directory>", "type": "shell", "multiple": true }
        ],
        "description": null,
        "flags": [
          {
            "names": ["-u", "--upstream-remote-name"],
            "description": "Upstream remote name when cloning a fork",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "delete": {
        "usage": "gh repo delete [<repository>] [flags]",
        "inputs": [
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "Delete a GitHub repository.",
        "flags": [
          {
            "names": ["--yes"],
            "description": "confirm deletion without prompting",
            "input": null
          }
        ]
      },
      "deploy-key": {},
      "edit": {
        "usage": "gh repo edit [<repository>] [flags]",
        "inputs": [
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "Edit repository settings.",
        "flags": [
          {
            "names": ["--add-topic"],
            "description": "Add repository topic",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--allow-forking"],
            "description": "Allow forking of an organization repository",
            "input": null
          },
          {
            "names": ["--allow-update-branch"],
            "description": "Allow a pull request head branch that is behind its base branch to be updated",
            "input": null
          },
          {
            "names": ["--default-branch"],
            "description": "Set the default branch name for the repository",
            "input": { "name": "<name>", "type": "shell" }
          },
          {
            "names": ["--delete-branch-on-merge"],
            "description": "Delete head branch when pull requests are merged",
            "input": null
          },
          {
            "names": ["-d", "--description"],
            "description": "Description of the repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--enable-auto-merge"],
            "description": "Enable auto-merge functionality",
            "input": null
          },
          {
            "names": ["--enable-discussions"],
            "description": "Enable discussions in the repository",
            "input": null
          },
          {
            "names": ["--enable-issues"],
            "description": "Enable issues in the repository",
            "input": null
          },
          {
            "names": ["--enable-merge-commit"],
            "description": "Enable merging pull requests via merge commit",
            "input": null
          },
          {
            "names": ["--enable-projects"],
            "description": "Enable projects in the repository",
            "input": null
          },
          {
            "names": ["--enable-rebase-merge"],
            "description": "Enable merging pull requests via rebase",
            "input": null
          },
          {
            "names": ["--enable-squash-merge"],
            "description": "Enable merging pull requests via squashed commit",
            "input": null
          },
          {
            "names": ["--enable-wiki"],
            "description": "Enable wiki in the repository",
            "input": null
          },
          {
            "names": ["-h", "--homepage"],
            "description": "Repository home page URL",
            "input": { "name": "<URL>", "type": "shell" }
          },
          {
            "names": ["--remove-topic"],
            "description": "Remove repository topic",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--template"],
            "description": "Make the repository available as a template repository",
            "input": null
          },
          {
            "names": ["--visibility"],
            "description": "Change the visibility of the repository to {public,private,internal}",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "fork": {
        "usage": "gh repo fork [<repository>] [-- <gitflags>...] [flags]",
        "inputs": [
          { "name": "<repository>] [-- <gitflags>", "type": "shell" },
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "Create a fork of a repository.",
        "flags": [
          {
            "names": ["--clone"],
            "description": "Clone the fork",
            "input": null
          },
          {
            "names": ["--default-branch-only"],
            "description": "Only include the default branch in the fork",
            "input": null
          },
          {
            "names": ["--fork-name"],
            "description": "Rename the forked repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--org"],
            "description": "Create the fork in an organization",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--remote"],
            "description": "Add a git remote for the fork",
            "input": null
          },
          {
            "names": ["--remote-name"],
            "description": "Specify the name for the new remote",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "rename": {
        "usage": "gh repo rename [<new-name>] [flags]",
        "inputs": [{ "name": "<new-name>", "type": "shell", "multiple": true }],
        "description": "Rename a GitHub repository.",
        "flags": [
          {
            "names": ["-R", "--repo"],
            "description": "Select another repository using the [HOST/]OWNER/REPO format",
            "input": { "name": "<[HOST/]OWNER/REPO>", "type": "shell" }
          },
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "set-default": {
        "usage": "gh repo set-default [<repository>] [flags]",
        "inputs": [
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "This command sets the default remote repository to use when querying the\nGitHub API for the locally cloned repository.",
        "flags": [
          {
            "names": ["-u", "--unset"],
            "description": "unset the current default repository",
            "input": null
          },
          {
            "names": ["-v", "--view"],
            "description": "view the current default repository",
            "input": null
          }
        ]
      },
      "sync": {
        "usage": "gh repo sync [<destination-repository>] [flags]",
        "inputs": [
          {
            "name": "<destination-repository>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": null,
        "flags": [
          {
            "names": ["-b", "--branch"],
            "description": "Branch to sync (default: main branch)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--force"],
            "description": "Hard reset the branch of the destination repository to match the source repository",
            "input": null
          },
          {
            "names": ["-s", "--source"],
            "description": "Source repository",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "unarchive": {
        "usage": "gh repo unarchive [<repository>] [flags]",
        "inputs": [
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "Unarchive a GitHub repository.",
        "flags": [
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "view": {
        "usage": "gh repo view [<repository>] [flags]",
        "inputs": [
          { "name": "<repository>", "type": "shell", "multiple": true }
        ],
        "description": "Display the description and the README of a GitHub repository.",
        "flags": [
          {
            "names": ["-b", "--branch"],
            "description": "View a specific branch of the repository",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open a repository in the browser",
            "input": null
          }
        ]
      }
    }
  },
  "run": {
    "description": "List, view, and watch recent workflow runs from GitHub Actions.",
    "subcommands": {
      "cancel": {
        "usage": "gh run cancel [<run-id>]",
        "inputs": [{ "name": "<run-id>", "type": "shell", "multiple": true }],
        "description": "Cancel a workflow run",
        "flags": []
      },
      "download": {
        "usage": "gh run download [<run-id>] [flags]",
        "inputs": [{ "name": "<run-id>", "type": "shell", "multiple": true }],
        "description": "Download artifacts generated by a GitHub Actions workflow run.",
        "flags": [
          {
            "names": ["-D", "--dir"],
            "description": "The directory to download artifacts into",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-n", "--name"],
            "description": "Download artifacts that match any of the given names",
            "input": { "name": "<stringArray>", "type": "string" }
          },
          {
            "names": ["-p", "--pattern"],
            "description": "Download artifacts that match a glob pattern",
            "input": { "name": "<stringArray>", "type": "string" }
          }
        ]
      },
      "list": {
        "usage": "gh run list [flags]",
        "inputs": [],
        "description": "List recent workflow runs",
        "flags": [
          {
            "names": ["-b", "--branch"],
            "description": "Filter runs by branch",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of runs to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-u", "--user"],
            "description": "Filter runs by user who triggered the run",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--workflow"],
            "description": "Filter runs by workflow",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "rerun": {
        "usage": "gh run rerun [<run-id>] [flags]",
        "inputs": [{ "name": "<run-id>", "type": "shell", "multiple": true }],
        "description": "Rerun a failed run",
        "flags": [
          {
            "names": ["-d", "--debug"],
            "description": "Rerun with debug logging",
            "input": null
          },
          {
            "names": ["--failed"],
            "description": "Rerun only failed jobs, including dependencies",
            "input": null
          },
          {
            "names": ["-j", "--job"],
            "description": "Rerun a specific job from a run, including dependencies",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "view": {
        "usage": "gh run view [<run-id>] [flags]",
        "inputs": [{ "name": "<run-id>", "type": "shell", "multiple": true }],
        "description": "View a summary of a workflow run",
        "flags": [
          {
            "names": ["--exit-status"],
            "description": "Exit with non-zero status if run failed",
            "input": null
          },
          {
            "names": ["-j", "--job"],
            "description": "View a specific job ID from a run",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["--log"],
            "description": "View full log for either a run or specific job",
            "input": null
          },
          {
            "names": ["--log-failed"],
            "description": "View the log for any failed steps in a run or specific job",
            "input": null
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-v", "--verbose"],
            "description": "Show job steps",
            "input": null
          },
          {
            "names": ["-w", "--web"],
            "description": "Open run in the browser",
            "input": null
          }
        ]
      },
      "watch": {
        "usage": "gh run watch <run-id> [flags]",
        "inputs": [{ "name": "<run-id>", "type": "shell" }],
        "description": "Watch a run until it completes, showing its progress",
        "flags": [
          {
            "names": ["--exit-status"],
            "description": "Exit with non-zero status if run fails",
            "input": null
          },
          {
            "names": ["-i", "--interval"],
            "description": "Refresh interval in seconds",
            "input": { "name": "<int>", "type": "shell" }
          }
        ]
      }
    }
  },
  "workflow": {
    "description": "List, view, and run workflows in GitHub Actions.",
    "subcommands": {
      "disable": {
        "usage": "gh workflow disable [<workflow-id> | <workflow-name>]",
        "inputs": [
          {
            "name": "<workflow-id> | <workflow-name>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Disable a workflow, preventing it from running or showing up when listing workflows.",
        "flags": []
      },
      "enable": {
        "usage": "gh workflow enable [<workflow-id> | <workflow-name>]",
        "inputs": [
          {
            "name": "<workflow-id> | <workflow-name>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Enable a workflow, allowing it to be run and show up when listing workflows.",
        "flags": []
      },
      "list": {
        "usage": "gh workflow list [flags]",
        "inputs": [],
        "description": "List workflow files, hiding disabled workflows by default.",
        "flags": [
          {
            "names": ["-a", "--all"],
            "description": "Show all workflows, including disabled workflows",
            "input": null
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of workflows to fetch",
            "input": { "name": "<int>", "type": "shell" }
          }
        ]
      },
      "run": {
        "usage": "gh workflow run [<workflow-id> | <workflow-name>] [flags]",
        "inputs": [
          {
            "name": "<workflow-id> | <workflow-name>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "Create a workflow_dispatch event for a given workflow.",
        "flags": [
          {
            "names": ["-F", "--field"],
            "description": "Add a string parameter in key=value format, respecting @ syntax",
            "input": { "name": "<key=value>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Read workflow inputs as JSON via STDIN",
            "input": null
          },
          {
            "names": ["-f", "--raw-field"],
            "description": "Add a string parameter in key=value format",
            "input": { "name": "<key=value>", "type": "shell" }
          },
          {
            "names": ["-r", "--ref"],
            "description": "The branch or tag name which contains the version of the workflow file you'd like to run",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "view": {
        "usage": "gh workflow view [<workflow-id> | <workflow-name> | <filename>] [flags]",
        "inputs": [
          {
            "name": "<workflow-id> | <workflow-name> | <filename>",
            "type": "shell",
            "multiple": true
          }
        ],
        "description": "View the summary of a workflow",
        "flags": [
          {
            "names": ["-r", "--ref"],
            "description": "The branch or tag name which contains the version of the workflow file you'd like to view",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open workflow in the browser",
            "input": null
          },
          {
            "names": ["-y", "--yaml"],
            "description": "View the workflow yaml file",
            "input": null
          }
        ]
      }
    }
  },
  "alias": {
    "description": "Aliases can be used to make shortcuts for gh commands or to compose multiple commands.",
    "subcommands": {
      "delete": {
        "usage": "gh alias delete <alias>",
        "inputs": [{ "name": "<alias>", "type": "shell" }],
        "description": "Delete an alias",
        "flags": []
      },
      "list": {
        "usage": "gh alias list",
        "inputs": [],
        "description": "This command prints out all of the aliases gh is configured to use.",
        "flags": []
      },
      "set": {
        "usage": "gh alias set <alias> <expansion> [flags]",
        "inputs": [{ "name": "<alias> <expansion>", "type": "shell" }],
        "description": "Define a word that will expand to a full gh command when invoked.",
        "flags": [
          {
            "names": ["-s", "--shell"],
            "description": "Declare an alias to be passed through a shell interpreter",
            "input": null
          }
        ]
      }
    }
  },
  "api": { "description": "", "subcommands": {} },
  "completion": { "description": "", "subcommands": {} },
  "config": {
    "description": "Display or change configuration settings for gh.",
    "subcommands": {
      "get": {
        "usage": "gh config get <key> [flags]",
        "inputs": [{ "name": "<key>", "type": "shell" }],
        "description": "Print the value of a given configuration key",
        "flags": [
          {
            "names": ["-h", "--host"],
            "description": "Get per-host setting",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "list": {
        "usage": "gh config list [flags]",
        "inputs": [],
        "description": "Print a list of configuration keys and values",
        "flags": [
          {
            "names": ["-h", "--host"],
            "description": "Get per-host configuration",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "set": {
        "usage": "gh config set <key> <value> [flags]",
        "inputs": [{ "name": "<key> <value>", "type": "shell" }],
        "description": "Update configuration with a value for the given key",
        "flags": [
          {
            "names": ["-h", "--host"],
            "description": "Set per-host setting",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      }
    }
  },
  "extension": {
    "description": "GitHub CLI extensions are repositories that provide additional gh commands.",
    "subcommands": {
      "browse": {
        "usage": "gh extension browse [flags]",
        "inputs": [],
        "description": "This command will take over your terminal and run a fully interactive\ninterface for browsing, adding, and removing gh extensions. A terminal\nwidth greater than 100 columns is recommended.",
        "flags": [
          {
            "names": ["--debug"],
            "description": "log to /tmp/extBrowse-*",
            "input": null
          },
          {
            "names": ["-s", "--single-column"],
            "description": "Render TUI with only one column of text",
            "input": null
          }
        ]
      },
      "create": {
        "usage": "gh extension create [<name>] [flags]",
        "inputs": [{ "name": "<name>", "type": "shell", "multiple": true }],
        "description": "Create a new extension",
        "flags": [
          {
            "names": ["--precompiled"],
            "description": "Create a precompiled extension. Possible values: go, other",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "exec": {
        "usage": "gh extension exec <name> [args]",
        "inputs": [{ "name": "<name>", "type": "shell" }],
        "description": "Execute an extension using the short name. For example, if the extension repository is\n\"owner/gh-extension\", you should pass \"extension\". You can use this command when\nthe short name conflicts with a core gh command.",
        "flags": []
      },
      "install": {
        "usage": "gh extension install <repository> [flags]",
        "inputs": [{ "name": "<repository>", "type": "shell" }],
        "description": "Install a GitHub repository locally as a GitHub CLI extension.",
        "flags": [
          {
            "names": ["--pin"],
            "description": "pin extension to a release tag or commit ref",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "list": {
        "usage": "gh extension list",
        "inputs": [],
        "description": "List installed extension commands",
        "flags": []
      },
      "remove": {
        "usage": "gh extension remove <name>",
        "inputs": [{ "name": "<name>", "type": "shell" }],
        "description": "Remove an installed extension",
        "flags": []
      },
      "search": {
        "usage": "gh extension search [<query>] [flags]",
        "inputs": [{ "name": "<query>", "type": "shell", "multiple": true }],
        "description": "Search for gh extensions.",
        "flags": [
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["--license"],
            "description": "Filter based on license type",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of extensions to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--order"],
            "description": "Order of repositories returned, ignored unless '--sort' flag is specified: {asc|desc}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--owner"],
            "description": "Filter on owner",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--sort"],
            "description": "Sort fetched repositories: {forks|help-wanted-issues|stars|updated}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the search query in the web browser",
            "input": null
          }
        ]
      },
      "upgrade": {
        "usage": "gh extension upgrade {<name> | --all} [flags]",
        "inputs": [],
        "description": "Upgrade installed extensions",
        "flags": [
          {
            "names": ["--all"],
            "description": "Upgrade all extensions",
            "input": null
          },
          {
            "names": ["--dry-run"],
            "description": "Only display upgrades",
            "input": null
          },
          {
            "names": ["--force"],
            "description": "Force upgrade extension",
            "input": null
          }
        ]
      }
    }
  },
  "gpg-key": {
    "description": "Manage GPG keys registered with your GitHub account.",
    "subcommands": {
      "add": {
        "usage": "gh gpg-key add [<key-file>] [flags]",
        "inputs": [{ "name": "<key-file>", "type": "shell", "multiple": true }],
        "description": "Add a GPG key to your GitHub account",
        "flags": [
          {
            "names": ["-t", "--title"],
            "description": "Title for the new key",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "delete": {
        "usage": "gh gpg-key delete <key-id> [flags]",
        "inputs": [{ "name": "<key-id>", "type": "shell" }],
        "description": "Delete a GPG key from your GitHub account",
        "flags": [
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "list": {
        "usage": "gh gpg-key list",
        "inputs": [],
        "description": "Lists GPG keys in your GitHub account",
        "flags": []
      }
    }
  },
  "label": {
    "description": "Work with GitHub labels.",
    "subcommands": {
      "clone": {
        "usage": "gh label clone <source-repository> [flags]",
        "inputs": [{ "name": "<source-repository>", "type": "shell" }],
        "description": "Clones labels from a source repository to a destination repository on GitHub.\nBy default, the destination repository is the current repository.",
        "flags": [
          {
            "names": ["-f", "--force"],
            "description": "Overwrite labels in the destination repository",
            "input": null
          }
        ]
      },
      "create": {
        "usage": "gh label create <name> [flags]",
        "inputs": [{ "name": "<name>", "type": "shell" }],
        "description": "Create a new label on GitHub, or updates an existing one with --force.",
        "flags": [
          {
            "names": ["-c", "--color"],
            "description": "Color of the label",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--description"],
            "description": "Description of the label",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-f", "--force"],
            "description": "Update the label color and description if label already exists",
            "input": null
          }
        ]
      },
      "delete": {
        "usage": "gh label delete <name> [flags]",
        "inputs": [{ "name": "<name>", "type": "shell" }],
        "description": "Delete a label from a repository",
        "flags": [
          {
            "names": ["--yes"],
            "description": "Confirm deletion without prompting",
            "input": null
          }
        ]
      },
      "edit": {
        "usage": "gh label edit <name> [flags]",
        "inputs": [{ "name": "<name>", "type": "shell" }],
        "description": "Update a label on GitHub.",
        "flags": [
          {
            "names": ["-c", "--color"],
            "description": "Color of the label",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-d", "--description"],
            "description": "Description of the label",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-n", "--name"],
            "description": "New name of the label",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "list": {
        "usage": "gh label list [flags]",
        "inputs": [],
        "description": "Display labels in a GitHub repository.",
        "flags": [
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of labels to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--order"],
            "description": "Order of labels returned: {asc|desc}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-S", "--search"],
            "description": "Search label names and descriptions",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--sort"],
            "description": "Sort fetched labels: {created|name}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "List labels in the web browser",
            "input": null
          }
        ]
      }
    }
  },
  "search": {
    "description": "Search across all of GitHub.",
    "subcommands": {
      "commits": {
        "usage": "gh search commits [<query>] [flags]",
        "inputs": [{ "name": "<query>", "type": "shell", "multiple": true }],
        "description": "Search for commits on GitHub.",
        "flags": [
          {
            "names": ["--author"],
            "description": "Filter by author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--author-date"],
            "description": "Filter based on authored date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--author-email"],
            "description": "Filter on author email",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--author-name"],
            "description": "Filter on author name",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--committer"],
            "description": "Filter by committer",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--committer-date"],
            "description": "Filter based on committed date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--committer-email"],
            "description": "Filter on committer email",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--committer-name"],
            "description": "Filter on committer name",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--hash"],
            "description": "Filter by commit hash",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of commits to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--merge"],
            "description": "Filter on merge commits",
            "input": null
          },
          {
            "names": ["--order"],
            "description": "Order of commits returned, ignored unless '--sort' flag is specified: {asc|desc}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--owner"],
            "description": "Filter on repository owner",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--parent"],
            "description": "Filter by parent hash",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--repo"],
            "description": "Filter on repository",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--sort"],
            "description": "Sort fetched commits: {author-date|committer-date}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--tree"],
            "description": "Filter by tree hash",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--visibility"],
            "description": "Filter based on repository visibility: {public|private|internal}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the search query in the web browser",
            "input": null
          }
        ]
      },
      "issues": {
        "usage": "gh search issues [<query>] [flags]",
        "inputs": [{ "name": "<query>", "type": "shell", "multiple": true }],
        "description": "Search for issues on GitHub.",
        "flags": [
          {
            "names": ["--app"],
            "description": "Filter by GitHub App author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--archived"],
            "description": "Restrict search to archived repositories",
            "input": null
          },
          {
            "names": ["--assignee"],
            "description": "Filter by assignee",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--author"],
            "description": "Filter by author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--closed"],
            "description": "Filter on closed at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--commenter"],
            "description": "Filter based on comments by user",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["--comments"],
            "description": "Filter on number of comments",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--created"],
            "description": "Filter based on created at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--include-prs"],
            "description": "Include pull requests in results",
            "input": null
          },
          {
            "names": ["--interactions"],
            "description": "Filter on number of reactions and comments",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--involves"],
            "description": "Filter based on involvement of user",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["--label"],
            "description": "Filter on label",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--language"],
            "description": "Filter based on the coding language",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of results to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--locked"],
            "description": "Filter on locked conversation status",
            "input": null
          },
          {
            "names": ["--match"],
            "description": "Restrict search to specific field of issue: {title|body|comments}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--mentions"],
            "description": "Filter based on user mentions",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["--milestone"],
            "description": "Filter by milestone title",
            "input": { "name": "<title>", "type": "shell" }
          },
          {
            "names": ["--no-assignee"],
            "description": "Filter on missing assignee",
            "input": null
          },
          {
            "names": ["--no-label"],
            "description": "Filter on missing label",
            "input": null
          },
          {
            "names": ["--no-milestone"],
            "description": "Filter on missing milestone",
            "input": null
          },
          {
            "names": ["--no-project"],
            "description": "Filter on missing project",
            "input": null
          },
          {
            "names": ["--order"],
            "description": "Order of results returned, ignored unless '--sort' flag is specified: {asc|desc}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--owner"],
            "description": "Filter on repository owner",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--project"],
            "description": "Filter on project board number",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--reactions"],
            "description": "Filter on number of reactions",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--repo"],
            "description": "Filter on repository",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--sort"],
            "description": "Sort fetched results: {comments|created|interactions|reactions|reactions-+1|reactions--1|reactions-heart|reactions-smile|reactions-tada|reactions-thinking_face|updated}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--state"],
            "description": "Filter based on state: {open|closed}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--team-mentions"],
            "description": "Filter based on team mentions",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--updated"],
            "description": "Filter on last updated at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--visibility"],
            "description": "Filter based on repository visibility: {public|private|internal}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the search query in the web browser",
            "input": null
          }
        ]
      },
      "prs": {
        "usage": "gh search prs [<query>] [flags]",
        "inputs": [{ "name": "<query>", "type": "shell", "multiple": true }],
        "description": "Search for pull requests on GitHub.",
        "flags": [
          {
            "names": ["--app"],
            "description": "Filter by GitHub App author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--archived"],
            "description": "Restrict search to archived repositories",
            "input": null
          },
          {
            "names": ["--assignee"],
            "description": "Filter by assignee",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--author"],
            "description": "Filter by author",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-B", "--base"],
            "description": "Filter on base branch name",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--checks"],
            "description": "Filter based on status of the checks: {pending|success|failure}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--closed"],
            "description": "Filter on closed at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--commenter"],
            "description": "Filter based on comments by user",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["--comments"],
            "description": "Filter on number of comments",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--created"],
            "description": "Filter based on created at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--draft"],
            "description": "Filter based on draft state",
            "input": null
          },
          {
            "names": ["-H", "--head"],
            "description": "Filter on head branch name",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--interactions"],
            "description": "Filter on number of reactions and comments",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--involves"],
            "description": "Filter based on involvement of user",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["--label"],
            "description": "Filter on label",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--language"],
            "description": "Filter based on the coding language",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of results to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--locked"],
            "description": "Filter on locked conversation status",
            "input": null
          },
          {
            "names": ["--match"],
            "description": "Restrict search to specific field of issue: {title|body|comments}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--mentions"],
            "description": "Filter based on user mentions",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["--merged"],
            "description": "Filter based on merged state",
            "input": null
          },
          {
            "names": ["--merged-at"],
            "description": "Filter on merged at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--milestone"],
            "description": "Filter by milestone title",
            "input": { "name": "<title>", "type": "shell" }
          },
          {
            "names": ["--no-assignee"],
            "description": "Filter on missing assignee",
            "input": null
          },
          {
            "names": ["--no-label"],
            "description": "Filter on missing label",
            "input": null
          },
          {
            "names": ["--no-milestone"],
            "description": "Filter on missing milestone",
            "input": null
          },
          {
            "names": ["--no-project"],
            "description": "Filter on missing project",
            "input": null
          },
          {
            "names": ["--order"],
            "description": "Order of results returned, ignored unless '--sort' flag is specified: {asc|desc}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--owner"],
            "description": "Filter on repository owner",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--project"],
            "description": "Filter on project board number",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--reactions"],
            "description": "Filter on number of reactions",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--repo"],
            "description": "Filter on repository",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--review"],
            "description": "Filter based on review status: {none|required|approved|changes_requested}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--review-requested"],
            "description": "Filter on user or team requested to review",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["--reviewed-by"],
            "description": "Filter on user who reviewed",
            "input": { "name": "<user>", "type": "shell" }
          },
          {
            "names": ["--sort"],
            "description": "Sort fetched results: {comments|reactions|reactions-+1|reactions--1|reactions-smile|reactions-thinking_face|reactions-heart|reactions-tada|interactions|created|updated}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--state"],
            "description": "Filter based on state: {open|closed}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--team-mentions"],
            "description": "Filter based on team mentions",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--updated"],
            "description": "Filter on last updated at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--visibility"],
            "description": "Filter based on repository visibility: {public|private|internal}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the search query in the web browser",
            "input": null
          }
        ]
      },
      "repos": {
        "usage": "gh search repos [<query>] [flags]",
        "inputs": [{ "name": "<query>", "type": "shell", "multiple": true }],
        "description": "Search for repositories on GitHub.",
        "flags": [
          {
            "names": ["--archived"],
            "description": "Filter based on archive state",
            "input": null
          },
          {
            "names": ["--created"],
            "description": "Filter based on created at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--followers"],
            "description": "Filter based on number of followers",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--forks"],
            "description": "Filter on number of forks",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--good-first-issues"],
            "description": "Filter on number of issues with the 'good first issue' label",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--help-wanted-issues"],
            "description": "Filter on number of issues with the 'help wanted' label",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--include-forks"],
            "description": "Include forks in fetched repositories: {false|true|only}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-q", "--jq"],
            "description": "Filter JSON output using a jq expression",
            "input": { "name": "<expression>", "type": "shell" }
          },
          {
            "names": ["--json"],
            "description": "Output JSON with the specified fields",
            "input": { "name": "<fields>", "type": "shell" }
          },
          {
            "names": ["--language"],
            "description": "Filter based on the coding language",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--license"],
            "description": "Filter based on license type",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-L", "--limit"],
            "description": "Maximum number of repositories to fetch",
            "input": { "name": "<int>", "type": "shell" }
          },
          {
            "names": ["--match"],
            "description": "Restrict search to specific field of repository: {name|description|readme}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--number-topics"],
            "description": "Filter on number of topics",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["--order"],
            "description": "Order of repositories returned, ignored unless '--sort' flag is specified: {asc|desc}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--owner"],
            "description": "Filter on owner",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--size"],
            "description": "Filter on a size range, in kilobytes",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--sort"],
            "description": "Sort fetched repositories: {forks|help-wanted-issues|stars|updated}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--stars"],
            "description": "Filter on number of stars",
            "input": { "name": "<number>", "type": "shell" }
          },
          {
            "names": ["-t", "--template"],
            "description": "Format JSON output using a Go template; see \"gh help formatting\"",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["--topic"],
            "description": "Filter on topic",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["--updated"],
            "description": "Filter on last updated at date",
            "input": { "name": "<date>", "type": "shell" }
          },
          {
            "names": ["--visibility"],
            "description": "Filter based on visibility: {public|private|internal}",
            "input": { "name": "<strings>", "type": "string" }
          },
          {
            "names": ["-w", "--web"],
            "description": "Open the search query in the web browser",
            "input": null
          }
        ]
      }
    }
  },
  "secret": {
    "description": "Secrets can be set at the repository, or organization level for use in\nGitHub Actions or Dependabot. User, organization, and repository secrets can be set for\nuse in GitHub Codespaces. Environment secrets can be set for use in\nGitHub Actions. Run \"gh help secret set\" to learn how to get started.",
    "subcommands": {
      "delete": {
        "usage": "gh secret delete <secret-name> [flags]",
        "inputs": [{ "name": "<secret-name>", "type": "shell" }],
        "description": "Delete a secret on one of the following levels:",
        "flags": [
          {
            "names": ["-a", "--app"],
            "description": "Delete a secret for a specific application: {actions|codespaces|dependabot}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-e", "--env"],
            "description": "Delete a secret for an environment",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-o", "--org"],
            "description": "Delete a secret for an organization",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-u", "--user"],
            "description": "Delete a secret for your user",
            "input": null
          }
        ]
      },
      "list": {
        "usage": "gh secret list [flags]",
        "inputs": [],
        "description": "List secrets on one of the following levels:",
        "flags": [
          {
            "names": ["-a", "--app"],
            "description": "List secrets for a specific application: {actions|codespaces|dependabot}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-e", "--env"],
            "description": "List secrets for an environment",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-o", "--org"],
            "description": "List secrets for an organization",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-u", "--user"],
            "description": "List a secret for your user",
            "input": null
          }
        ]
      },
      "set": {
        "usage": "gh secret set <secret-name> [flags]",
        "inputs": [{ "name": "<secret-name>", "type": "shell" }],
        "description": "Set a value for a secret on one of the following levels:",
        "flags": [
          {
            "names": ["-a", "--app"],
            "description": "Set the application for a secret: {actions|codespaces|dependabot}",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-b", "--body"],
            "description": "The value for the secret (reads from standard input if not specified)",
            "input": { "name": "<string>", "type": "string" }
          },
          {
            "names": ["-e", "--env"],
            "description": "Set deployment environment secret",
            "input": { "name": "<environment>", "type": "shell" }
          },
          {
            "names": ["-f", "--env-file"],
            "description": "Load secret names and values from a dotenv-formatted file",
            "input": { "name": "<file>", "type": "shell" }
          },
          {
            "names": ["--no-store"],
            "description": "Print the encrypted, base64-encoded value instead of storing it on Github",
            "input": null
          },
          {
            "names": ["-o", "--org"],
            "description": "Set organization secret",
            "input": { "name": "<organization>", "type": "shell" }
          },
          {
            "names": ["-r", "--repos"],
            "description": "List of repositories that can access an organization or user secret",
            "input": { "name": "<repositories>", "type": "shell" }
          },
          {
            "names": ["-u", "--user"],
            "description": "Set a secret for your user",
            "input": null
          },
          {
            "names": ["-v", "--visibility"],
            "description": "Set visibility for an organization secret: {all|private|selected}",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      }
    }
  },
  "ssh-key": {
    "description": "Manage SSH keys registered with your GitHub account.",
    "subcommands": {
      "add": {
        "usage": "gh ssh-key add [<key-file>] [flags]",
        "inputs": [{ "name": "<key-file>", "type": "shell", "multiple": true }],
        "description": "Add an SSH key to your GitHub account",
        "flags": [
          {
            "names": ["-t", "--title"],
            "description": "Title for the new key",
            "input": { "name": "<string>", "type": "string" }
          }
        ]
      },
      "delete": {
        "usage": "gh ssh-key delete <id> [flags]",
        "inputs": [{ "name": "<id>", "type": "shell" }],
        "description": "Delete an SSH key from your GitHub account",
        "flags": [
          {
            "names": ["-y", "--yes"],
            "description": "Skip the confirmation prompt",
            "input": null
          }
        ]
      },
      "list": {
        "usage": "gh ssh-key list",
        "inputs": [],
        "description": "Lists SSH keys in your GitHub account",
        "flags": []
      }
    }
  },
  "status": { "description": "", "subcommands": {} }
}
